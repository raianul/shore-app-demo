#!/bin/bash
here="$(dirname "${BASH_SOURCE[0]}")"

function compose {
    docker-compose "$@"
}

function _compose_exec {
   compose exec shorepay "$@"
}


function manage {
    compose run shorepay bash -c "./manage.py" "$@"
}

function test {
    compose run --name test shore-app bash -c "python -m pytest" "$@"
    status=$?
    [ $status -eq 0 ]
}

function shell_plus {
    manage shell_plus --ipython
}

function base {
     compose  build
}

function zapserver {
    compose -f docker-compose-sap.yml build  #run -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-stable ls -la #zap-api-scan.py -t https://ea16-2a02-8109-a180-7448-b942-b815-564-6e6e.eu.ngrok.io/api/account -f openapi --hook=/zap/wrk/hook.py -r test_report_$(date -u +'%Y%m%d').html
    # source .env
    # docker run -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-stable zap-api-scan.py -t $TARGET_ZAP_URL -f openapi -r testreport.html --hook=/zap/wrk/hook.py test_report_$(date -u +'%Y%m%d').html
}

function zaptest {
    cp .env.example .env
    source .env
    mkdir -pv zap
    compose -f docker-compose-sap.yml run -e SHOREPAY_ACCESS_KEY=$SHOREPAY_ACCESS_KEY -v $(pwd):/zap/wrk/:rw --name zaptest zaproxy bash -c "zap-api-scan.py -t $TARGET_ZAP_URL -f openapi --hook=/zap/wrk/hook.py -r report.html" "$@"
    status=$?
    docker cp zaptest:/zap/wrk/report.html ./zap/report.html
    [ $status -eq 0 ]
    # compose -f docker-compose-sap.yml build  #run -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-stable ls -la #zap-api-scan.py -t https://ea16-2a02-8109-a180-7448-b942-b815-564-6e6e.eu.ngrok.io/api/account -f openapi --hook=/zap/wrk/hook.py -r test_report_$(date -u +'%Y%m%d').html
}


function dev_server {
    compose up --build
}

function upd {
    compose up -d --build
}

function logs {
    compose logs -f --tail="all"
}

function down {
    compose down
}

function shell {
    _compose_exec bash
}

function dbshell {
    _compose_exec_db psql -U inventorum -d inventorum_develop
}

function infra_init {
  make -C terraform/globals init
  make -C terraform/service init
  make -C terraform/secrets init
}

function infra_lint {
  make -C terraform/globals lint
  make -C terraform/service lint
  make -C terraform/secrets lint
}

function infra_plan {
  make -C terraform/globals plan
  make -C terraform/service plan
  make -C terraform/secrets plan
}

function infra_apply {
  make -C terraform/globals apply
  make -C terraform/secrets apply_staging
  make -C terraform/service apply_staging
}

function _default {
    help
}

function help {
    echo "$0 <task> <args>"
    echo "Tasks:"
    compgen -A function | grep -v -E "^_" |cat -n
}

"${@:-_default}"
